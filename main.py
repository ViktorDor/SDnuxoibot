
#-=-=-=-=-=-=-=-=-=-=-=-
#–°–æ–∑–¥–∞—Ç–µ–ª—å:ViktorGoldFox
#-=-=-=-=-=-=-=-=-=-=-=-
#SDNuxoiBot
#–ë–æ—Ç –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–Ω–µ–π —Ä–æ–∂–µ–Ω–∏—è –∏ –Ω–µ —Ç–æ–ª—å–∫–æ

#–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
#–í 8:00 –ø–æ –ú–°–ö –≤—ã–≤–æ–¥–∏—Ç –ø–æ–≥–æ–¥—É
#–í 10:00 –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç –∏–º–µ–Ω–Ω–∏–Ω–∏–∫–æ–≤

# */add - –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ –Ω–∞ –ø—Ä—è–º—É—é –≤ —Ä–∞–±–æ—á—É—é –±–∞–∑—É –∞ –≤ 
# —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç "NewData")
# */weather - –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–≥–æ–¥—É

#–ê–¥–º–∏–Ω –∫–æ–º–º–∞–Ω–¥—ã:
# */stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞
# */logs - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏
# */send_message - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞

#–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
#–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–Ω–¥—ã —Å–º–æ—Ç—Ä–µ—Ç—å –≤ modls.txt
from shlex import join
from time import sleep 
import time
import telebot
import pandas as pd
import schedule
import datetime 
import threading
from urllib import request 
import requests 
import sys, os
import pymorphy2
from gigachat import GigaChat
import openai
from translate import Translator
import click

version = 'v2.6'
#OpenAi
openai.api_key = ""
Gigachat_token = ''
AIlimit = 50
Animspeed = 0.01
Text_limit = 200

translator= Translator(from_lang="Russian",to_lang="English")

#–£–∫–∞–∑–∞–Ω–∏–µ —Å–∞–π—Ç–∞ –ø–æ–≥–æ–¥—ã (Open wheather)
#–ó–∞–π—Ç–∏ –Ω–∞ —Å–∞—Ç–π openwheather.org –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Ç—Ä—É–∫—Ü–∏—è–º
url = ''

#–ë–æ—Ç –∫–æ–Ω—Ñ–∏–≥ 
chatid = '' #–ü–æ–º–µ–Ω—è–π—Ç–µ –Ω–∞ id –≥—Ä—É–ø–ø—ã
token = '' #–ü–æ–º–µ–Ω—è–π—Ç–µ –Ω–∞ token —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞

bot = telebot.TeleBot(token=token)

#–£–∫–∞–∑–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
#–ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω –≥–ª–∞–≤–Ω—ã–π
admins = []

#–£–∫–∞–∑–∞–Ω–∏–µ –ø—É—Ç–∏ –∫ DataFrame
data = pd.read_csv("–ü—É—Ç—å")

#–£–∫–∞–∑–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–ù–µ –º–µ–Ω—è—Ç—å!!!)
NowDR = []
start_time = datetime.datetime.now()
NowDate = datetime.datetime.now()
time = NowDate.replace(microsecond=0)

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–µ–Ω—è—Ç—å
Weather_time = "08:00"
Gift_time = "10:00"

#========================================================= 
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–Ω–¥
@bot.message_handler(commands=['help'])
def get_help(message):
    bot.send_message(message.chat.id, "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å chatGPT \n /ask_gigachat - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GigaChat \n /add - –î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö \n /weather - –í—ã–≤–µ—Å—Ç–∏ –ø–æ–≥–æ–¥—É Version: " + version)

#========================================================= 
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–Ω–¥ AI
@bot.message_handler(commands=['generate'])
def generate_image(message):
    try:
        argus = message.text.split()
        if len(argus) < 2:
            bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return False
        argus.pop(0)
        txt = " ".join(argus)
        # txt = translator.translate(txt)
        mess = bot.send_message(message.chat.id, "üïê –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        mess
        completion = openai.Image.create(
  model='dall-e-2',
  prompt=txt,
  n=1
)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        sleep(0.5)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïï –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..")
        sleep(0.5)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïò –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        sleep(0.5)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="‚úÖ–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ:")
        logs_save(log_text=str(str("[Info] @" + message.from_user.username) + ' –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ' + txt))
        image_url = completion['data'][0]['url']
        file_name = 'image.png'
        request.urlretrieve(image_url, file_name)
        with open("image.png", 'rb') as im:
            bot.send_photo(message.chat.id, im)
            im.close()
        os.remove('image.png')
    except Exception as e:
        bot.send_message(message.chat.id, '–í –ø—Ä–æ–º—Ç–µ –æ—à–∏–±–∫–∞. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –≤–æ–∑–º–æ–∂–Ω–∞')
        logs_save(log_text=str('[Error] ChatGPT generate. code' + str(e)))
        return False
   
@bot.message_handler(commands=['ask'])
def ask_gpt(message):
    try:
        argus = message.text.split()
        if len(argus) < 2:
            bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return False
        argus.pop(0)
        txt = " ".join(argus)
        mess = bot.send_message(message.chat.id, "üïê –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        mess
        completion = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
  messages=[
    {"role": "user", "content": txt}
  ]
)
        logs_save(log_text=str(str("[Info] @" + message.from_user.username) + ' –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è ChatGPT: ' + txt))
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        sleep(0.5)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïï –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..")
        sleep(0.5)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïò –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        sleep(0.5)
        text = ''
        argus = completion.choices[0].message.content.split()
        if len(argus) > Text_limit:
            txt_one = " ".join(argus[:Text_limit])
            txt_two = " ".join(argus[Text_limit:])
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text=str("ChatGPT3.5 - " + txt_one))
            bot.send_message(message.chat.id, txt_two)
            return False
        
        for i in range(len(argus)):
            text = text + argus[i] + ' '
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text=text)
            sleep(Animspeed)
    except Exception as e:
        logs_save(log_text=str('[Error] ChatGPT ask. code' + str(e)))
        bot.send_message(message.chat.id, 'ChatGPT –≤—Ä–µ–º–º–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
#========================================================= 
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–Ω–¥ GigaChat
@bot.message_handler(commands=['ask_gigachat'])
def ask_giga_chat(message):
    try:
        argus = message.text.split()
        if len(argus) < 2:
            bot.send_message(message.chat.id, "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return False
        argus.pop(0)
        txt = " ".join(argus)
        mess = bot.send_message(message.chat.id, "üïê –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        mess
        with GigaChat(credentials=Gigachat_token, verify_ssl_certs=False) as giga:
            response = giga.chat(txt)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        sleep(0.5)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïï –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..")
        sleep(0.5)
        bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text="üïò –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        sleep(0.5)
        text = ''
        argus = response.choices[0].message.content.split()
        if len(argus) > Text_limit:
            txt_one = " ".join(argus[:Text_limit])
            txt_two = " ".join(argus[Text_limit:])
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text=str("GigaChat - " + txt_one))
            bot.send_message(message.chat.id, txt_two)
            return False
        
        for i in range(len(argus)):
            text = text + argus[i] + ' '
            bot.edit_message_text(chat_id=message.chat.id, message_id=mess.message_id, text=text)
            sleep(Animspeed)
        logs_save(log_text=str(str("[Info] @" + message.from_user.username) + ' –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è GiGaChat: ' + txt))
    except Exception as e:
        logs_save(log_text=str('[Error] GigaChat ask. code' + str(e)))
        bot.send_message(message.chat.id, "GiGaChat –≤—Ä–µ–º–º–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

#========================================================= 
#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–Ω–¥
@bot.message_handler(commands=['weather'])
def send_weather_person(message):
    weather_data = requests.get(url).json()
    temperature = round(weather_data['main']['temp'])
    humidity = (weather_data['main']['humidity'])
    weathers = (weather_data['weather'][0]['description'])
    text = ("–í –ü–∏—Ç–µ—Ä–µ —Å–µ–π—á–∞—Å: " + str(weathers) + '\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + str(temperature) + '¬∞C' + '\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: ' + str(humidity) + '%')
    logs_save(log_text=str('[Info] –í—ã–≤–µ–¥–µ–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ' + str(message.from_user.username)))
    bot.send_message(message.chat.id,text)   
#----------------------------------------------------------
@bot.message_handler(commands=['add'])
def appending(message):
    bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä 1 5. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤–≤–µ–¥–∏—Ç–µ: –û—Ç–º–µ–Ω–∞")
    bot.register_next_step_handler(message,save_new)

#==========================================================
#admins commands
@bot.message_handler(commands=['send_message'])
def send_message(message):
    argus = message.text.split()
    if len(argus) < 2:
        bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã')
    else:
        for i in range(len(admins)):
                if str(message.from_user.id) == admins[i]:
                    argus.pop(0)
                    txt = " ".join(argus)
                    logs_save(log_text=str('[Warn] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞:') + txt)
                    bot.send_message(chatid, txt)
                    bot.send_message(message.from_user.id, "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!")
                else:
                    continue
#----------------------------------------------------------      
@bot.message_handler(commands=['stats'])
def get_stats(message):
    for i in range(len(admins)):
                if str(message.from_user.id) == admins[i]:
                    current_time = datetime.datetime.now()
                    time_work = round(current_time - start_time, 3)
                    bot.send_message(message.from_user.id,"Stats: OK \n Work Time: " + str(time_work))
#----------------------------------------------------------
@bot.message_handler(commands=['logs'])
def get_stats(message):
    for i in range(len(admins)):
                if str(message.from_user.id) == admins[i]:
                    with open('logs.txt', 'r+') as log:
                        bot.send_message(message.from_user.id,str(log.read()))
                    logs_save(logs_text='[Info] –í—ã–≤–µ–¥–µ–Ω—ã –ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ' + message.from_user.nickname)
                    log.close
#----------------------------------------------------------
@bot.message_handler(commands=['logsclear'])
def get_stats(message):
    for i in range(len(admins)):
        if str(message.from_user.id) == admins[i]:
            with open('logs.txt', 'w+') as log:
                log.write("\n")
            logs_save(log_text=str("[Warn] Logs clear! \n"))
            bot.send_message(message.from_user.id, "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω–Ω—ã!")
#----------------------------------------------------------     
#–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
#–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!
@bot.message_handler(commands=['test'])
def getmessage(message):    
    if (message.from_user,id == admins[1]):
        bot.send_message(message.from_user.id, message)    
#=========================================================
#–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≥–æ–¥—ã 
def send_weather():
    try:
        #–ó–∞–ø–∏—Å—å –≤ –ª–æ–≥–∏
        logs_save(str(str(NowDate) + '[Info] –í—ã–≤–µ–¥–µ–Ω–Ω–∞ –ø–æ–≥–æ–¥–∞'))
        
        #–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã —Å —Å–∞–π—Ç–∞ OpenWeather
        try:
            weather_data = requests.get(url).json()
            temperature = round(weather_data['main']['temp'])
            humidity = (weather_data['main']['humidity'])
            weathers = (weather_data['weather'][0]['description'])
        except Exception as e:
            logs_save(log_text=str('[Error] Weather input. code' + str(e)))
            return False
        #–ü–æ–º–µ–Ω—è–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥ —Å–≤–æ–π!
        text_w = ("–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ü–µ—Ç–µ—Ä–±—É—Ä–∂—Ü—ã!" + "\n–í –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å: " + str(weathers) + '\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ' + str(temperature) + '¬∞C' + '\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: ' + str(humidity) + '%')
        
        #–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
        bot.send_message(chatid,text_w)
    except Exception as e:
        logs_save(log_text=str("[Error] - Send weather. code" + str(e)))
#==========================================================
#–£–∫–∞–∑–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∫–æ–º–º–∞–Ω–¥
def treager():
    while True:
        schedule.run_pending()
        sleep(1)
#----------------------------------------------------------  
def check():
    try:
        NowDate = datetime.datetime.now()
        NowDay = NowDate.day
        NowMonth = NowDate.month
        
        if int(data[(data['dday'] == NowDay) & (data["dmon"] == NowMonth)].shape[0]) >= 1:
            NowDR = data.index[(data['dday'] == NowDay) & (data["dmon"] == NowMonth)].tolist()
            
        if int(data[(data['dday'] == NowDay) & (data["dmon"] == NowMonth)].shape[0]) <= 0:
            logs_save(log_text='[Info] –ò–º–º–µ–Ω–Ω–∏–Ω–∏–∫–æ–≤ –Ω–µ—Ç—É!')
            return False
        ind = 0
        for b in range(int(len(NowDR))):
            #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
            text = "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É " + data.loc[NowDR[ind],"nickname"] + ", –ø–æ–∂–µ–ª–∞–µ–º " + data.loc[NowDR[ind],"name"] + " —É–¥–∞—á–∏, —Å—á–∞—Å—Ç—å—è, –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!\n"
            bot.send_message(chatid,"‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=-=‚Äì=\n" + text + "‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=‚Äì=-=‚Äì=")
            logs_save(str('[Info] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ' + data.loc[NowDR[ind],"nickname"]))
            ind += 1
            NowDR = []
    except Exception as e:
        logs_save(log_text=str("[Error] Gift message. code:", e))
#----------------------------------------------------------      
def save_new(message):
    if message.text == "–û—Ç–º–µ–Ω–∞" or message.text == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.from_user.id, "–û—Ç–º–µ–Ω—è—é")
        return False
    try:
        argus = message.text.split()
        morph = pymorphy2.MorphAnalyzer()
        word_c = morph.parse(argus[0])[0]
        gent = word_c.inflect({'datv'})
        save_text = str((gent.word).title() + "," + "@" +message.from_user.username + "," + argus[1] + "," + argus[2])
        day_range = 0
        month_range = 0
        
        for i in argus[1]:
            day_range += 1
            if i == "0":
                #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
                bot.send_message(message.from_user.id, "–Ø –∂–µ —Å–∫–∞–∑–∞–ª –±–µ–∑ –Ω—É–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Nickname Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä @Test 1 5")
                bot.register_next_step_handler(message,save_new)
                return False
        
        for i in argus[2]:
            month_range += 1
            if i == "0":
                #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
                bot.send_message(message.from_user.id, "–Ø –∂–µ —Å–∫–∞–∑–∞–ª –±–µ–∑ –Ω—É–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Nickname Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä @Test 1 5")
                bot.register_next_step_handler(message,save_new)
                return False
        if day_range > 2 or day_range < 1 or month_range > 2 or day_range < 1 or int(argus[1]) > 31 or int(argus[2]) > 12:
            #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
            bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Nickname Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä @Test 1 5")
            bot.register_next_step_handler(message,save_new)
            return False
        
        with open('NewData.txt', 'a') as f:
            f.write(save_text + '\n')
        #–ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
        bot.send_message(message.from_user.id, "–õ–∞–¥–Ω–æ-–ª–∞–¥–Ω–æ, –∑–∞–ø–∏—Å–∞–ª, –æ—Ç—Å—Ç–∞–Ω—å")
        logs_save(log_text=str('[Info] –ó–∞–ø–∏—Å–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:' + save_text))
        f.close()
    except Exception as e:
        # –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Å–≤–æ–π!
        bot.send_message(message.from_user.id, "–£ –≤–∞—Å —á—Ç–æ-—Ç–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –Ω—É–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name Nickname Day Month. –ü—Ä–∏–º–µ—Ä: –í–∏–∫—Ç–æ—Ä @Test 1 5")
        bot.register_next_step_handler(message,save_new)
        logs_save(log_text=str('[Error] Add. code:' + e))
        return False
#==========================================================
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
def logs_save(log_text=''):
    NowDate = datetime.datetime.now()
    time = NowDate.replace(microsecond=0)
    argus = log_text.split()
    if argus[0] == '[Error]':
        click.echo(click.style(f"{log_text}", fg="red"))
    else:
        if argus[0] == '[Warn]':
            click.echo(click.style(f"{log_text}", fg="yellow"))
        else:
            click.echo(click.style(f"{log_text}", fg="green"))
            
    # print(str(time) + " - " + log_text + '\n')
    bot.send_message(admins[1], str(str(time) + " - " + log_text))
    with open('logs.txt', 'a') as log:
        log.write(str(time) + " - " + log_text + '\n')
    log.close

#==========================================================
#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
schedule.every().day.at(Weather_time).do(send_weather)
schedule.every().day.at(Gift_time).do(check)   

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
threading_treager = threading.Thread(target=treager)
threading_treager.start()

# –†—É—á–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–Ω–∏–µ
# –†–∞—Å–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–∫—É –Ω–∏–∂–µ, —É–∫–∞–∑–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç
# check(NowDay=15, NowMonth=11)

#==========================================================
#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
logs_save(log_text=str('[Info] Bot start'))
try:
    bot.polling(non_stop=True, interval=1)
except Exception as e:
    logs_save(log_text="[Error] Time out. code: " + str(e))
